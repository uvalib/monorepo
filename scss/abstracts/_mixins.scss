@use '../base/breakpoints'as *;
@use '../base/colors'as *;

/// WHEN ADDING MIXINS, PLEASE ADD ALPHABETICALLY
/// When including a new mixin, if you think that
/// and example of how to use would be helpful, please
/// include a "USAGE" section after the code.
/// Please be sure to comment out ALL unnecessary code.

///BUTTONS - in header
@mixin menu-link-default {
  color: $text-color-dark !important;
  background-color: #fff !important;
}

/// BREAKPOINTS
/// @author Kitty Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-to($breakpoint) {

  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {

    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
    +"Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

/// USAGE
// .selector {
//   color: red;

//   @include respond-to('small') {
//     color: blue;
//   }
// }

/// RESULT
// .selector {
//   color: red;
// }

// @media (min-width: 40em) {
//   .selector {
//     color: blue;
//   }
// }

// END BREAKPOINTS

/// FLEX
@mixin flex-start {
  display: flex;
  flex-direction: column;
  flex-wrap: nowrap;
  justify-content: flex-start;
  align-content: stretch;
  align-items: flex-start;
}

/// ICONS
// This controls the overall size and placement of the icon
@mixin svg-base {
  display: inline-block;
  content: '';
  width: 1rem;
  height: 1rem;
  margin-top: .75em;
}
