@use '../base/breakpoints'as *;
@use '../base/colors'as *;
@use '../base/typography'as *;
@use '../base/svg_icons'as *;

/// WHEN ADDING MIXINS, PLEASE ADD ALPHABETICALLY - BY CATEGORY
/// When including a new mixin, if you think that
/// and example of how to use would be helpful, please
/// include a "USAGE" section after the code.
/// Please be sure to comment out ALL unnecessary code.

// Accessibilty 
// accessibility-outline-on-light-bg
@mixin focus-dk {
  outline-offset: 0.25em;
  outline: 2px dotted $uva-blue-alt-A;
}

// accessibility-outline-on-dark-bg 
@mixin focus-lt {
  outline-offset: 0.25em;
  outline: 2px dotted $uva-blue-alt-300;
}


///BUTTONS - in header
// @mixin menu-link-default {
//   color: $text-color-dark !important;
//   background-color: #fff !important;
// }

/// BREAKPOINTS
/// @author Kitty Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-to($breakpoint) {

  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {

    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
    +"Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

/// USAGE
// .selector {
//   color: red;

//   @include respond-to('small') {
//     color: blue;
//   }
// }

/// RESULT
// .selector {
//   color: red;
// }

// @media (min-width: 40em) {
//   .selector {
//     color: blue;
//   }
// }

/// END BREAKPOINTS

/// FLEX
@mixin flex-start {
  display: flex;
  flex-direction: column;
  flex-wrap: nowrap;
  justify-content: flex-start;
  align-content: stretch;
  align-items: flex-start;
}

/// HEADER SIZES (USED WHEN NEEDING TO RESIZE AN EXISTING HEADER, BUT NOT THE TAG)
@mixin h2 {
  font-size: map-get($font-sizes, h2) !important;
  font-weight: map-get($font-weights, demi) !important;
}

@mixin h3 {
  font-size: map-get($font-sizes, h3) !important;
  font-weight: map-get($font-weights, medium) !important;
}

@mixin h4 {
  font-size: map-get($font-sizes, h4) !important;
  font-weight: map-get($font-weights, medium) !important;
}

@mixin h5 {
  font-size: map-get($font-sizes, h5) !important;
  font-weight: map-get($font-weights, medium) !important;
}

@mixin h6 {
  font-size: map-get($font-sizes, h6) !important;
  font-weight: map-get($font-weights, medium) !important;
}

/// ICONS
// This controls the overall size and placement of the icon
@mixin svg-base {
  display: inline-block;
  content: '';
  width: 1rem;
  height: 1rem;
  margin-top: .75em;
}

//VIRGO Search bar
@mixin virgo-search {
  position: absolute;
  top: 35%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
  z-index: 100;
  width: 100%;

  form {
    display: flex;
    max-width: 70%;
    margin: 0 auto;

    input {
      flex: 1;
      border: 1px solid #fff;
      text-indent: 1rem;
      border-radius: 0.3rem 0 0 0.3rem;

    }

    button {
      background-color: $uva-blue-alt;
      padding: 10px 12px;
      color: #fff;
      letter-spacing: 1px;
      cursor: pointer;
      border: 1px solid #fff;
      border-radius: 0 0.3rem 0.3rem 0;

      &::before {
        content: $icon-search--white;
        width: 1.5rem;
        height: 1.5rem;
        display: block;
      }

      &:hover {
        background-color: $uva-blue-alt-A;
      }
    }
  }
}
