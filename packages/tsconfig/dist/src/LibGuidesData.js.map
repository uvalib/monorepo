{"version":3,"file":"LibGuidesData.js","sourceRoot":"","sources":["../../../data-wrap/src/LibGuidesData.ts"],"names":[],"mappings":";;AAEA,qDAAqD;AACrD,MAAM,eAAe,GAAG,wOAAwO,CAAA;AAChQ,MAAM,OAAO,aAAa;IAItB,YAAY,IAAqB;;QAFjC,UAAK,GAAW,EAAE,CAAC;QAOnB,UAAK,GAA0B,EAAE,CAAC;QAJhC,2BAA2B;QAC3B,IAAI,IAAI,CAAC,KAAK;YAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IAC1C,CAAC;IAID,kDAAkD;IAClD,KAAK,CAAC,SAAS;QACb,OAAO,KAAK,CAAC,GAAG,eAAe,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC;aAC9C,IAAI,CAAC,CAAC,CAAA,EAAE,CAAA,CAAC,CAAC,IAAI,EAAE,CAAC;aACjB,IAAI,CAAC,CAAC,CAAA,EAAE;YACP,uBAAA,IAAI,6DAAc,MAAlB,IAAI,EAAe,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACnC,OAAO,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC,CAAC,CAAA;IACN,CAAC;CAcF;6GAZe,IAAY;IACxB,MAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAClD,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC;IAC7B,MAAM,WAAW,GAAG,WAAW,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;IACnE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAC,EAAE;;QAAA,OAAA,CAAC;YAChD,KAAK,EAAE,MAAA,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,0CAAE,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC;YAClF,WAAW,EAAE,MAAA,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,0CAAE,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC;YAC7F,IAAI,EAAC,EAAE;SACR,CAAC,CAAA;KAAA,CAAC,CAAC;IACJ,WAAW,CAAC,MAAM,EAAE,CAAC;AACvB,CAAC","sourcesContent":["import { GeneralSearchResult } from './GeneralSearchResult.js'\n\n// needs a q (query) parameter appended onto the end!\nconst libGuidesAPIURL = \"https://api.library.virginia.edu/libguides/srch_process_cs.php?action=580&search_source_id=0&layout=tab&start=0&group_id=0&guide_id=0&f_group_id=&f_guide_type_id=&f_guide_owner_id=&f_guide_tag_ids=&f_guide_subject_ids=&sort=_score\"\nexport class LibGuidesData {\n\n    query: string = \"\";\n\n    constructor(init: {query: string}){\n      // setup initial parameters\n      if (init.query) this.query = init.query;\n    }\n\n    items: GeneralSearchResult[] = [];\n  \n    // eslint-disable-next-line class-methods-use-this\n    async fetchData(){\n      return fetch(`${libGuidesAPIURL}q=${this.query}`)\n        .then(r=>r.json())\n        .then(d=>{\n          this.#parseResults(d.data.results);\n          return this.items;\n        })\n    }\n\n    #parseResults(data: string){\n      const detachedDiv = document.createElement('div');\n      detachedDiv.innerHTML = data;    \n      const resultNodes = detachedDiv.querySelectorAll('.s-srch-result');\n      this.items = Array.from(resultNodes).map((node)=>({\n        title: node.querySelector('.s-srch-result-title')?.innerHTML.replace(/\\s\\s/g, ' '),\n        description: node.querySelectorAll('.s-srch-result-meta')[1]?.innerHTML.replace(/\\s\\s/g, ' '),\n        link:\"\"\n      }));\n      detachedDiv.remove();\n    }\n  \n  }"]}